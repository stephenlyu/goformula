//
// GENERATED BY EASYLANG COMPILER.
// !!!! DON'T MODIFY IT!!!!!!
//

package native

import (
	. "github.com/stephenlyu/goformula/stockfunc/function"
	. "github.com/stephenlyu/goformula/function"
	. "github.com/stephenlyu/goformula/formulalibrary/base/formula"
	. "github.com/stephenlyu/goformula/formulalibrary/native/nativeformulas"
)

type vol struct {
	BaseNativeFormula

	// Data of all referenced period


	// Referenced Formulas


	// Vectors
    m1 Value
    m2 Value
    var1 Value
    volume Value
    var2 Value
    mavol1 Value
    var3 Value
    mavol2 Value
}

var (
	VOL_META = &FormulaMetaImpl{
		Name: "VOL",
		ArgNames: []string{"m1", "m2"},
		ArgMeta: []Arg {
			Arg{5.000000, 0.000000, 1000.000000},
			Arg{10.000000, 0.000000, 1000.000000},
		},
		Flags: []int{0x00000000, 0x00000000, 0x00000000},
		Colors: []*Color{{Red:-1, Green:-1, Blue:-1}, {Red:-1, Green:-1, Blue:-1}, {Red:-1, Green:-1, Blue:-1}},
		LineThicks: []int{1, 1, 1},
		LineStyles: []int{0, 0, 0},
		GraphTypes: []int{4, 1, 1},
		Vars: []string{"VOLUME", "MAVOL1", "MAVOL2"},
	}
)

func NewVOL(data *RVector, args []float64) Formula {
	o := &vol{
		BaseNativeFormula: BaseNativeFormula{
			FormulaMetaImpl: VOL_META,
			Data__: data,
		},
	}

	// Data of all referenced period


	// Referenced Formulas


	// Vectors
    o.m1 = Scalar(args[0])
    o.m2 = Scalar(args[1])
    o.var1 = VOLUME(o.Data__)
    o.volume = o.var1
    o.var2 = MA(o.volume, o.m1)
    o.mavol1 = o.var2
    o.var3 = MA(o.volume, o.m2)
    o.mavol2 = o.var3

	// Actions

    o.DrawActions__ = []DrawAction{

    }

	o.RefValues__ = []Value {o.volume, o.mavol1, o.mavol2}
	return o
}

func (this *vol) UpdateLastValue() {
    this.var1.UpdateLastValue()
    this.var2.UpdateLastValue()
    this.var3.UpdateLastValue()
}

func init() {
	RegisterNativeFormula(NewVOL, VOL_META)
}

	