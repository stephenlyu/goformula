//
// GENERATED BY EASYLANG COMPILER.
// !!!! DON'T MODIFY IT!!!!!!
//

package native

import (
	. "github.com/stephenlyu/goformula/stockfunc/function"
	. "github.com/stephenlyu/goformula/function"
	. "github.com/stephenlyu/goformula/formulalibrary/base/formula"
	. "github.com/stephenlyu/goformula/formulalibrary/native/nativeformulas"
	. "github.com/stephenlyu/goformula/datalibrary"
	. "github.com/stephenlyu/goformula/formulalibrary"
)

type cross struct {
	BaseNativeFormula

	// Data of all referenced period
    __data_code0_d1__ *RVector
    __index_map_code0_d1__ *IndexMap
    __data_code1___ *RVector
    __index_map_code1___ *IndexMap
    __data_code2_d1__ *RVector
    __index_map_code2_d1__ *IndexMap

	// Referenced Formulas
    formula_code0_d1_macd Formula
    formula_code1__macd Formula
    formula_code2_d1_macd Formula

	// Vectors
    var1 Value
    a Value
    var2 Value
    b Value
    var3 Value
    c Value
    var4 Value
    d Value
    var5 Value
    e Value
}

var (
	CROSS_META = &FormulaMetaImpl{
		Name: "CROSS",
		ArgNames: []string{},
		ArgMeta: []Arg {

		},
		Flags: []int{0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
		Colors: []*Color{{Red:-1, Green:-1, Blue:-1}, {Red:-1, Green:-1, Blue:-1}, {Red:-1, Green:-1, Blue:-1}, {Red:-1, Green:-1, Blue:-1}, {Red:-1, Green:-1, Blue:-1}},
		LineThicks: []int{1, 1, 1, 1, 1},
		LineStyles: []int{0, 0, 0, 0, 0},
		GraphTypes: []int{1, 1, 1, 1, 1},
		Vars: []string{"A", "B", "C", "D", "E"},
	}
)

func NewCROSS(data *RVector, args []float64) Formula {
	o := &cross{
		BaseNativeFormula: BaseNativeFormula{
			FormulaMetaImpl: CROSS_META,
			Data__: data,
		},
	}

	// Data of all referenced period
    o.__data_code0_d1__ = GlobalDataLibrary.GetData(data.Code(), "D1")
    o.__index_map_code0_d1__ = NewIndexMap(o.Data__, o.__data_code0_d1__)
    o.__data_code1___ = GlobalDataLibrary.GetData("000001", data.Period().Name())
    o.__index_map_code1___ = NewIndexMap(o.Data__, o.__data_code1___)
    o.__data_code2_d1__ = GlobalDataLibrary.GetData("999999", "D1")
    o.__index_map_code2_d1__ = NewIndexMap(o.Data__, o.__data_code2_d1__)

	// Referenced Formulas
    o.formula_code0_d1_macd = GlobalLibrary.NewFormula("MACD", o.__data_code0_d1__)
    o.formula_code1__macd = GlobalLibrary.NewFormula("MACD", o.__data_code1___)
    o.formula_code2_d1_macd = GlobalLibrary.NewFormula("MACD", o.__data_code2_d1__)

	// Vectors
    o.var1 = CrossValue(CLOSE(o.__data_code0_d1__), o.__index_map_code0_d1__)
    o.a = o.var1
    o.var2 = CrossValue(o.formula_code0_d1_macd.GetVarValue("MACD"), o.__index_map_code0_d1__)
    o.b = o.var2
    o.var3 = CrossValue(CLOSE(o.__data_code1___), o.__index_map_code1___)
    o.c = o.var3
    o.var4 = CrossValue(o.formula_code1__macd.GetVarValue("MACD"), o.__index_map_code1___)
    o.d = o.var4
    o.var5 = CrossValue(o.formula_code2_d1_macd.GetVarValue("DIF"), o.__index_map_code2_d1__)
    o.e = o.var5

	// Actions

    o.DrawActions__ = []DrawAction{

    }

	o.RefValues__ = []Value {o.a, o.b, o.c, o.d, o.e}
	return o
}

func (this *cross) UpdateLastValue() {
    this.formula_code0_d1_macd.UpdateLastValue()
    this.formula_code1__macd.UpdateLastValue()
    this.formula_code2_d1_macd.UpdateLastValue()
    this.var1.UpdateLastValue()
    this.var2.UpdateLastValue()
    this.var3.UpdateLastValue()
    this.var4.UpdateLastValue()
    this.var5.UpdateLastValue()
}

func init() {
	RegisterNativeFormula(NewCROSS, CROSS_META)
}

	