//
// GENERATED BY EASYLANG COMPILER.
// !!!! DON'T MODIFY IT!!!!!!
//

package native

import (
	. "github.com/stephenlyu/goformula/stockfunc/function"
	. "github.com/stephenlyu/goformula/function"
	. "github.com/stephenlyu/goformula/formulalibrary/base/formula"
	. "github.com/stephenlyu/goformula/formulalibrary/native/nativeformulas"
	. "github.com/stephenlyu/goformula/formulalibrary"
)

type macdbuy struct {
	BaseNativeFormula

	// Data of all referenced period


	// Referenced Formulas
    formula_code0__macd Formula

	// Vectors
    var1 Value
    var2 Value
    var4 Value
    var3 Value
}

var (
	MACDBUY_META = &FormulaMetaImpl{
		Name: "MACDBUY",
		ArgNames: []string{},
		ArgMeta: []Arg {

		},
		Flags: []int{0x00000000},
		Colors: []*Color{{Red:-1, Green:-1, Blue:-1}},
		LineThicks: []int{1},
		LineStyles: []int{0},
		GraphTypes: []int{1},
		Vars: []string{"做多"},
	}
)

func NewMACDBUY(data *RVector, args []float64) Formula {
	o := &macdbuy{
		BaseNativeFormula: BaseNativeFormula{
			FormulaMetaImpl: MACDBUY_META,
			Data__: data,
		},
	}

	// Data of all referenced period


	// Referenced Formulas
    o.formula_code0__macd = GlobalLibrary.NewFormula("MACD", o.Data__)

	// Vectors
    o.var1 = o.formula_code0__macd.GetVarValue("DIF")
    o.var2 = o.formula_code0__macd.GetVarValue("DEA")
    o.var4 = CROSS(o.var1, o.var2)
    o.var3 = o.var4

	// Actions

    o.DrawActions__ = []DrawAction{

    }

	o.RefValues__ = []Value {o.var3}
	return o
}

func (this *macdbuy) UpdateLastValue() {
    this.formula_code0__macd.UpdateLastValue()
    this.var4.UpdateLastValue()
}

func init() {
	RegisterNativeFormula(NewMACDBUY, MACDBUY_META)
}

	