//
// GENERATED BY EASYLANG COMPILER.
// !!!! DON'T MODIFY IT!!!!!!
//

package native

import (
	. "github.com/stephenlyu/goformula/stockfunc/function"
	. "github.com/stephenlyu/goformula/function"
	. "github.com/stephenlyu/goformula/formulalibrary/base/formula"
	. "github.com/stephenlyu/goformula/formulalibrary/native/nativeformulas"
)

type draw struct {
	BaseNativeFormula

	// Data of all referenced period


	// Referenced Formulas


	// Vectors
    var1 Value
    var2 Value
    var3 Value
    const1 Value
    var4 Value
    var5 Value
    string1 string
    var6 Value
    const2 Value
    var7 Value
    var8 Value
    var9 Value
    var10 Value
    const3 Value
    var11 Value
    __anonymous_1 Value
    var12 Value
    __anonymous_2 Value
    var13 Value
    const4 Value
}

var (
	DRAW_META = &FormulaMetaImpl{
		Name: "DRAW",
		ArgNames: []string{},
		ArgMeta: []Arg {

		},
		Flags: []int{0x00000000, 0x00000000},
		Colors: []*Color{{Red:255, Green:0, Blue:0}, {Red:255, Green:0, Blue:0}},
		LineThicks: []int{1, 9},
		LineStyles: []int{0, 0},
		GraphTypes: []int{0, 0},
		Vars: []string{"", ""},
	}
)

func NewDRAW(data *RVector, args []float64) Formula {
	o := &draw{
		BaseNativeFormula: BaseNativeFormula{
			FormulaMetaImpl: DRAW_META,
			Data__: data,
		},
	}

	// Data of all referenced period


	// Referenced Formulas


	// Vectors
    o.var1 = CLOSE(o.Data__)
    o.var2 = OPEN(o.Data__)
    o.var3 = DIV(o.var1, o.var2)
    o.const1 = Scalar(1.080000)
    o.var4 = GT(o.var3, o.const1)
    o.var5 = LOW(o.Data__)
    o.string1 = "abc"
    o.var6 = HIGH(o.Data__)
    o.const2 = Scalar(20.000000)
    o.var7 = HHV(o.var6, o.const2)
    o.var8 = GE(o.var6, o.var7)
    o.var9 = LLV(o.var5, o.const2)
    o.var10 = LE(o.var5, o.var9)
    o.const3 = Scalar(1.000000)
    o.var11 = DRAWLINE(o.var8, o.var6, o.var10, o.var5, o.const3)
    o.__anonymous_1 = o.var11
    o.var12 = PLOYLINE(o.var8, o.var6)
    o.__anonymous_2 = o.var12
    o.var13 = GT(o.var1, o.var2)
    o.const4 = Scalar(0.800000)

	// Actions

    o.DrawActions__ = []DrawAction{
        &DrawTextAction{ActionType:5, Cond:o.var4, Price:o.var5, Text:o.string1, Color:&Color{Red:0, Green:0, Blue:255}, NoDraw:0},
        &DrawLineAction{ActionType:1, Cond1:o.var8, Price1:o.var6, Cond2:o.var10, Price2:o.var5, Expand:1, NoDraw:0, Color:&Color{Red:255, Green:0, Blue:0}, LineThick:1, VarIndex:0},
        &PloyLineAction{ActionType:0, Cond:o.var8, Price:o.var6, NoDraw:0, Color:&Color{Red:255, Green:0, Blue:0}, LineThick:9, VarIndex:1},
        &StickLineAction{ActionType:3, Cond:o.var13, Price1:o.var1, Price2:o.var2, Width:0.800000, Empty:1, NoDraw:0, Color:&Color{Red:0, Green:255, Blue:255}, LineThick:1},
        &DrawIconAction{ActionType:4, Cond:o.var13, Price:o.var5, Type:1, NoDraw:0},
        &DrawKLineAction{ActionType:2, High:o.var6, Open:o.var2, Low:o.var5, Close:o.var1, NoDraw:1},
    }

	o.RefValues__ = []Value {o.__anonymous_1, o.__anonymous_2}
	return o
}

func (this *draw) UpdateLastValue() {
    this.var1.UpdateLastValue()
    this.var2.UpdateLastValue()
    this.var3.UpdateLastValue()
    this.var4.UpdateLastValue()
    this.var5.UpdateLastValue()
    this.var6.UpdateLastValue()
    this.var7.UpdateLastValue()
    this.var8.UpdateLastValue()
    this.var9.UpdateLastValue()
    this.var10.UpdateLastValue()
    this.var11.UpdateLastValue()
    this.var12.UpdateLastValue()
    this.var13.UpdateLastValue()
}

func init() {
	RegisterNativeFormula(NewDRAW, DRAW_META)
}

	